{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from 'react-native-reanimated';\nimport DrawerProgressContext from \"../../utils/DrawerProgressContext\";\nimport { GestureState, PanGestureHandler } from \"../GestureHandler\";\nimport Overlay from \"./Overlay\";\nvar Clock = Animated.Clock,\n  Value = Animated.Value,\n  onChange = Animated.onChange,\n  clockRunning = Animated.clockRunning,\n  startClock = Animated.startClock,\n  stopClock = Animated.stopClock,\n  spring = Animated.spring,\n  abs = Animated.abs,\n  add = Animated.add,\n  and = Animated.and,\n  block = Animated.block,\n  call = Animated.call,\n  cond = Animated.cond,\n  divide = Animated.divide,\n  eq = Animated.eq,\n  event = Animated.event,\n  greaterThan = Animated.greaterThan,\n  lessThan = Animated.lessThan,\n  max = Animated.max,\n  min = Animated.min,\n  multiply = Animated.multiply,\n  neq = Animated.neq,\n  or = Animated.or,\n  set = Animated.set,\n  sub = Animated.sub;\nvar TRUE = 1;\nvar FALSE = 0;\nvar NOOP = 0;\nvar UNSET = -1;\nvar DIRECTION_LEFT = 1;\nvar DIRECTION_RIGHT = -1;\nvar SWIPE_DISTANCE_MINIMUM = 5;\nvar DEFAULT_DRAWER_WIDTH = '80%';\nvar SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01\n};\nvar ANIMATED_ZERO = new Animated.Value(0);\nvar ANIMATED_ONE = new Animated.Value(1);\nvar DrawerView = function (_React$Component) {\n  _inherits(DrawerView, _React$Component);\n  var _super = _createSuper(DrawerView);\n  function DrawerView() {\n    var _this;\n    _classCallCheck(this, DrawerView);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"handleEndInteraction\", function () {\n      if (_this.interactionHandle !== undefined) {\n        InteractionManager.clearInteractionHandle(_this.interactionHandle);\n        _this.interactionHandle = undefined;\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleStartInteraction\", function () {\n      if (_this.interactionHandle === undefined) {\n        _this.interactionHandle = InteractionManager.createInteractionHandle();\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getDrawerWidth\", function () {\n      var _this$props = _this.props,\n        drawerStyle = _this$props.drawerStyle,\n        dimensions = _this$props.dimensions;\n      var _ref = StyleSheet.flatten(drawerStyle) || {},\n        _ref$width = _ref.width,\n        width = _ref$width === void 0 ? DEFAULT_DRAWER_WIDTH : _ref$width;\n      if (typeof width === 'string' && width.endsWith('%')) {\n        var percentage = Number(width.replace(/%$/, ''));\n        if (Number.isFinite(percentage)) {\n          return dimensions.width * (percentage / 100);\n        }\n      }\n      return typeof width === 'number' ? width : 0;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"clock\", new Clock());\n    _defineProperty(_assertThisInitialized(_this), \"interactionHandle\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"isDrawerTypeFront\", new Value(_this.props.drawerType === 'front' ? TRUE : FALSE));\n    _defineProperty(_assertThisInitialized(_this), \"isOpen\", new Value(_this.props.open ? TRUE : FALSE));\n    _defineProperty(_assertThisInitialized(_this), \"nextIsOpen\", new Value(UNSET));\n    _defineProperty(_assertThisInitialized(_this), \"isSwiping\", new Value(FALSE));\n    _defineProperty(_assertThisInitialized(_this), \"initialDrawerWidth\", _this.getDrawerWidth());\n    _defineProperty(_assertThisInitialized(_this), \"gestureState\", new Value(GestureState.UNDETERMINED));\n    _defineProperty(_assertThisInitialized(_this), \"touchX\", new Value(0));\n    _defineProperty(_assertThisInitialized(_this), \"velocityX\", new Value(0));\n    _defineProperty(_assertThisInitialized(_this), \"gestureX\", new Value(0));\n    _defineProperty(_assertThisInitialized(_this), \"offsetX\", new Value(0));\n    _defineProperty(_assertThisInitialized(_this), \"position\", new Value(_this.props.open ? _this.initialDrawerWidth * (_this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT) : 0));\n    _defineProperty(_assertThisInitialized(_this), \"containerWidth\", new Value(_this.props.dimensions.width));\n    _defineProperty(_assertThisInitialized(_this), \"drawerWidth\", new Value(_this.initialDrawerWidth));\n    _defineProperty(_assertThisInitialized(_this), \"drawerOpacity\", new Value(_this.props.drawerType === 'permanent' ? 1 : 0));\n    _defineProperty(_assertThisInitialized(_this), \"drawerPosition\", new Value(_this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT));\n    _defineProperty(_assertThisInitialized(_this), \"touchDistanceFromDrawer\", cond(_this.isDrawerTypeFront, cond(eq(_this.drawerPosition, DIRECTION_LEFT), max(sub(sub(_this.touchX, _this.gestureX), _this.drawerWidth), 0), min(multiply(sub(sub(_this.containerWidth, _this.drawerWidth), sub(_this.touchX, _this.gestureX)), DIRECTION_RIGHT), 0)), 0));\n    _defineProperty(_assertThisInitialized(_this), \"swipeDistanceThreshold\", new Value(_this.props.swipeDistanceThreshold));\n    _defineProperty(_assertThisInitialized(_this), \"swipeVelocityThreshold\", new Value(_this.props.swipeVelocityThreshold));\n    _defineProperty(_assertThisInitialized(_this), \"currentOpenValue\", _this.props.open);\n    _defineProperty(_assertThisInitialized(_this), \"pendingOpenValue\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"isStatusBarHidden\", false);\n    _defineProperty(_assertThisInitialized(_this), \"manuallyTriggerSpring\", new Value(FALSE));\n    _defineProperty(_assertThisInitialized(_this), \"transitionTo\", function (isOpen) {\n      var toValue = new Value(0);\n      var frameTime = new Value(0);\n      var state = {\n        position: _this.position,\n        time: new Value(0),\n        finished: new Value(FALSE),\n        velocity: new Value(0)\n      };\n      return block([cond(clockRunning(_this.clock), NOOP, [set(toValue, multiply(isOpen, _this.drawerWidth, _this.drawerPosition)), set(frameTime, 0), set(state.time, 0), set(state.finished, FALSE), set(state.velocity, _this.velocityX), set(_this.isOpen, isOpen), startClock(_this.clock), call([], _this.handleStartInteraction), set(_this.manuallyTriggerSpring, FALSE)]), spring(_this.clock, state, _objectSpread(_objectSpread({}, SPRING_CONFIG), {}, {\n        toValue: toValue\n      })), cond(state.finished, [set(_this.touchX, 0), set(_this.gestureX, 0), set(_this.velocityX, 0), set(_this.offsetX, 0), stopClock(_this.clock), call([_this.isOpen], function (_ref2) {\n        var _ref3 = _slicedToArray(_ref2, 1),\n          value = _ref3[0];\n        var open = Boolean(value);\n        _this.handleEndInteraction();\n        if (open !== _this.props.open) {\n          _this.toggleDrawer(_this.props.open);\n        }\n      })])]);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"dragX\", block([onChange(_this.isOpen, call([_this.isOpen], function (_ref4) {\n      var _ref5 = _slicedToArray(_ref4, 1),\n        value = _ref5[0];\n      var open = Boolean(value);\n      _this.currentOpenValue = open;\n      if (open !== _this.props.open) {\n        if (open) {\n          _this.props.onOpen();\n        } else {\n          _this.props.onClose();\n        }\n        _this.pendingOpenValue = open;\n        _this.forceUpdate();\n      }\n    })), onChange(_this.nextIsOpen, cond(neq(_this.nextIsOpen, UNSET), [cond(clockRunning(_this.clock), stopClock(_this.clock)), set(_this.isOpen, _this.nextIsOpen), set(_this.gestureX, 0), set(_this.nextIsOpen, UNSET)])), onChange(_this.isSwiping, call([_this.isSwiping], function (_ref6) {\n      var _ref7 = _slicedToArray(_ref6, 1),\n        value = _ref7[0];\n      var keyboardDismissMode = _this.props.keyboardDismissMode;\n      if (value === TRUE) {\n        if (keyboardDismissMode === 'on-drag') {\n          Keyboard.dismiss();\n        }\n        _this.toggleStatusBar(true);\n      } else {\n        _this.toggleStatusBar(_this.currentOpenValue);\n      }\n    })), onChange(_this.gestureState, cond(eq(_this.gestureState, GestureState.ACTIVE), call([], _this.handleStartInteraction))), cond(eq(_this.gestureState, GestureState.ACTIVE), [cond(_this.isSwiping, NOOP, [set(_this.isSwiping, TRUE), set(_this.offsetX, _this.position)]), set(_this.position, add(_this.offsetX, _this.gestureX, _this.touchDistanceFromDrawer)), stopClock(_this.clock)], [set(_this.isSwiping, FALSE), set(_this.touchX, 0), _this.transitionTo(cond(_this.manuallyTriggerSpring, _this.isOpen, cond(or(and(greaterThan(abs(_this.gestureX), SWIPE_DISTANCE_MINIMUM), greaterThan(abs(_this.velocityX), _this.swipeVelocityThreshold)), greaterThan(abs(_this.gestureX), _this.swipeDistanceThreshold)), cond(eq(_this.drawerPosition, DIRECTION_LEFT), greaterThan(cond(eq(_this.velocityX, 0), _this.gestureX, _this.velocityX), 0), lessThan(cond(eq(_this.velocityX, 0), _this.gestureX, _this.velocityX), 0)), _this.isOpen)))]), _this.position]));\n    _defineProperty(_assertThisInitialized(_this), \"translateX\", cond(eq(_this.drawerPosition, DIRECTION_RIGHT), min(max(multiply(_this.drawerWidth, -1), _this.dragX), 0), max(min(_this.drawerWidth, _this.dragX), 0)));\n    _defineProperty(_assertThisInitialized(_this), \"progress\", cond(eq(_this.drawerWidth, 0), 0, abs(divide(_this.translateX, _this.drawerWidth))));\n    _defineProperty(_assertThisInitialized(_this), \"handleGestureEvent\", event([{\n      nativeEvent: {\n        x: _this.touchX,\n        translationX: _this.gestureX,\n        velocityX: _this.velocityX\n      }\n    }]));\n    _defineProperty(_assertThisInitialized(_this), \"handleGestureStateChange\", event([{\n      nativeEvent: {\n        state: function state(s) {\n          return set(_this.gestureState, s);\n        }\n      }\n    }]));\n    _defineProperty(_assertThisInitialized(_this), \"handleContainerLayout\", function (e) {\n      return _this.containerWidth.setValue(e.nativeEvent.layout.width);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleDrawerLayout\", function (e) {\n      _this.drawerWidth.setValue(e.nativeEvent.layout.width);\n      _this.toggleDrawer(_this.props.open);\n      requestAnimationFrame(function () {\n        return requestAnimationFrame(function () {\n          return _this.drawerOpacity.setValue(1);\n        });\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"toggleDrawer\", function (open) {\n      if (_this.currentOpenValue !== open) {\n        _this.nextIsOpen.setValue(open ? TRUE : FALSE);\n        _this.currentOpenValue = open;\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"toggleStatusBar\", function (hidden) {\n      var _this$props2 = _this.props,\n        hideStatusBar = _this$props2.hideStatusBarOnOpen,\n        statusBarAnimation = _this$props2.statusBarAnimation;\n      if (hideStatusBar && _this.isStatusBarHidden !== hidden) {\n        _this.isStatusBarHidden = hidden;\n        StatusBar.setHidden(hidden, statusBarAnimation);\n      }\n    });\n    return _this;\n  }\n  _createClass(DrawerView, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props3 = this.props,\n        open = _this$props3.open,\n        drawerPosition = _this$props3.drawerPosition,\n        drawerType = _this$props3.drawerType,\n        swipeDistanceThreshold = _this$props3.swipeDistanceThreshold,\n        swipeVelocityThreshold = _this$props3.swipeVelocityThreshold,\n        hideStatusBar = _this$props3.hideStatusBarOnOpen;\n      if (typeof this.pendingOpenValue !== 'boolean' || open !== this.pendingOpenValue) {\n        this.toggleDrawer(open);\n      }\n      this.pendingOpenValue = undefined;\n      if (open !== prevProps.open && hideStatusBar) {\n        this.toggleStatusBar(open);\n      }\n      if (prevProps.drawerPosition !== drawerPosition) {\n        this.drawerPosition.setValue(drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT);\n      }\n      if (prevProps.drawerType !== drawerType) {\n        this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n      }\n      if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n        this.swipeDistanceThreshold.setValue(swipeDistanceThreshold);\n      }\n      if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n        this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.toggleStatusBar(false);\n      this.handleEndInteraction();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$props4 = this.props,\n        open = _this$props4.open,\n        swipeEnabled = _this$props4.swipeEnabled,\n        drawerPosition = _this$props4.drawerPosition,\n        drawerType = _this$props4.drawerType,\n        swipeEdgeWidth = _this$props4.swipeEdgeWidth,\n        drawerStyle = _this$props4.drawerStyle,\n        overlayStyle = _this$props4.overlayStyle,\n        renderDrawerContent = _this$props4.renderDrawerContent,\n        renderSceneContent = _this$props4.renderSceneContent,\n        gestureHandlerProps = _this$props4.gestureHandlerProps;\n      var isOpen = drawerType === 'permanent' ? true : open;\n      var isRight = drawerPosition === 'right';\n      var contentTranslateX = drawerType === 'front' ? ANIMATED_ZERO : this.translateX;\n      var drawerTranslateX = drawerType === 'back' ? I18nManager.isRTL ? multiply(sub(this.containerWidth, this.drawerWidth), isRight ? 1 : -1) : ANIMATED_ZERO : this.translateX;\n      var offset = drawerType === 'back' ? 0 : I18nManager.isRTL ? '100%' : multiply(this.drawerWidth, -1);\n      var hitSlop = isRight ? {\n        right: 0,\n        width: isOpen ? undefined : swipeEdgeWidth\n      } : {\n        left: 0,\n        width: isOpen ? undefined : swipeEdgeWidth\n      };\n      var progress = drawerType === 'permanent' ? ANIMATED_ONE : this.progress;\n      return React.createElement(DrawerProgressContext.Provider, {\n        value: progress\n      }, React.createElement(PanGestureHandler, _extends({\n        activeOffsetX: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n        failOffsetY: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n        onGestureEvent: this.handleGestureEvent,\n        onHandlerStateChange: this.handleGestureStateChange,\n        hitSlop: hitSlop,\n        enabled: drawerType !== 'permanent' && swipeEnabled\n      }, gestureHandlerProps), React.createElement(Animated.View, {\n        onLayout: this.handleContainerLayout,\n        style: [styles.main, {\n          flexDirection: drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row'\n        }]\n      }, React.createElement(Animated.View, {\n        style: [styles.content, drawerType !== 'permanent' ? {\n          transform: [{\n            translateX: contentTranslateX\n          }]\n        } : undefined]\n      }, React.createElement(View, {\n        accessibilityElementsHidden: isOpen && drawerType !== 'permanent',\n        importantForAccessibility: isOpen && drawerType !== 'permanent' ? 'no-hide-descendants' : 'auto',\n        style: styles.content\n      }, renderSceneContent()), drawerType === 'permanent' ? null : React.createElement(Overlay, {\n        progress: progress,\n        onPress: function onPress() {\n          return _this2.toggleDrawer(false);\n        },\n        style: overlayStyle,\n        accessibilityElementsHidden: !isOpen,\n        importantForAccessibility: isOpen ? 'auto' : 'no-hide-descendants'\n      })), React.createElement(Animated.Code, {\n        exec: this.containerWidth\n      }), drawerType === 'permanent' ? null : React.createElement(Animated.Code, {\n        exec: block([onChange(this.manuallyTriggerSpring, [cond(eq(this.manuallyTriggerSpring, TRUE), [set(this.nextIsOpen, FALSE), call([], function () {\n          return _this2.currentOpenValue = false;\n        })])])])\n      }), React.createElement(Animated.View, {\n        accessibilityViewIsModal: isOpen && drawerType !== 'permanent',\n        removeClippedSubviews: Platform.OS !== 'ios',\n        onLayout: this.handleDrawerLayout,\n        style: [styles.container, drawerType === 'permanent' ? {\n          opacity: 1\n        } : {\n          transform: [{\n            translateX: drawerTranslateX\n          }],\n          opacity: this.drawerOpacity\n        }, drawerType === 'permanent' ? isRight ? {\n          right: 0\n        } : {\n          left: 0\n        } : [styles.nonPermanent, isRight ? {\n          right: offset\n        } : {\n          left: offset\n        }, {\n          zIndex: drawerType === 'back' ? -1 : 0\n        }], drawerStyle]\n      }, renderDrawerContent()))));\n    }\n  }]);\n  return DrawerView;\n}(React.Component);\nexport { DrawerView as default };\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    maxWidth: '100%'\n  },\n  nonPermanent: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: DEFAULT_DRAWER_WIDTH\n  },\n  content: {\n    flex: 1\n  },\n  main: _objectSpread({\n    flex: 1\n  }, Platform.select({\n    web: null,\n    default: {\n      overflow: 'hidden'\n    }\n  }))\n});","map":{"version":3,"names":["React","I18nManager","InteractionManager","Keyboard","Platform","StatusBar","StyleSheet","View","Animated","DrawerProgressContext","GestureState","PanGestureHandler","Overlay","Clock","Value","onChange","clockRunning","startClock","stopClock","spring","abs","add","and","block","call","cond","divide","eq","event","greaterThan","lessThan","max","min","multiply","neq","or","set","sub","TRUE","FALSE","NOOP","UNSET","DIRECTION_LEFT","DIRECTION_RIGHT","SWIPE_DISTANCE_MINIMUM","DEFAULT_DRAWER_WIDTH","SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","ANIMATED_ZERO","ANIMATED_ONE","DrawerView","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","apply","concat","_defineProperty","_assertThisInitialized","interactionHandle","undefined","clearInteractionHandle","createInteractionHandle","_this$props","props","drawerStyle","dimensions","_ref","flatten","_ref$width","width","endsWith","percentage","Number","replace","isFinite","drawerType","open","getDrawerWidth","UNDETERMINED","initialDrawerWidth","drawerPosition","isDrawerTypeFront","touchX","gestureX","drawerWidth","containerWidth","swipeDistanceThreshold","swipeVelocityThreshold","isOpen","toValue","frameTime","state","position","time","finished","velocity","clock","velocityX","handleStartInteraction","manuallyTriggerSpring","_objectSpread","offsetX","_ref2","_ref3","_slicedToArray","value","Boolean","handleEndInteraction","toggleDrawer","_ref4","_ref5","currentOpenValue","onOpen","onClose","pendingOpenValue","forceUpdate","nextIsOpen","isSwiping","_ref6","_ref7","keyboardDismissMode","dismiss","toggleStatusBar","gestureState","ACTIVE","touchDistanceFromDrawer","transitionTo","dragX","translateX","nativeEvent","x","translationX","s","e","setValue","layout","requestAnimationFrame","drawerOpacity","hidden","_this$props2","hideStatusBar","hideStatusBarOnOpen","statusBarAnimation","isStatusBarHidden","setHidden","_createClass","key","componentDidUpdate","prevProps","_this$props3","componentWillUnmount","render","_this2","_this$props4","swipeEnabled","swipeEdgeWidth","overlayStyle","renderDrawerContent","renderSceneContent","gestureHandlerProps","isRight","contentTranslateX","drawerTranslateX","isRTL","offset","hitSlop","right","left","progress","createElement","Provider","_extends","activeOffsetX","failOffsetY","onGestureEvent","handleGestureEvent","onHandlerStateChange","handleGestureStateChange","enabled","onLayout","handleContainerLayout","style","styles","main","flexDirection","content","transform","accessibilityElementsHidden","importantForAccessibility","onPress","Code","exec","accessibilityViewIsModal","removeClippedSubviews","OS","handleDrawerLayout","container","opacity","nonPermanent","zIndex","Component","default","create","backgroundColor","maxWidth","top","bottom","flex","select","web","overflow"],"sources":["/home/khaibq/blockchain/mobile/node_modules/@react-navigation/drawer/lib/module/views/legacy/Drawer.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  I18nManager,\n  InteractionManager,\n  Keyboard,\n  LayoutChangeEvent,\n  Platform,\n  StatusBar,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport Animated from 'react-native-reanimated';\n\nimport type { DrawerProps } from '../../types';\nimport DrawerProgressContext from '../../utils/DrawerProgressContext';\nimport { GestureState, PanGestureHandler } from '../GestureHandler';\nimport Overlay from './Overlay';\n\nconst {\n  Clock,\n  Value,\n  onChange,\n  clockRunning,\n  startClock,\n  stopClock,\n  spring,\n  abs,\n  add,\n  and,\n  block,\n  call,\n  cond,\n  divide,\n  eq,\n  event,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  or,\n  set,\n  sub,\n} = Animated;\n\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\nconst UNSET = -1;\n\nconst DIRECTION_LEFT = 1;\nconst DIRECTION_RIGHT = -1;\n\nconst SWIPE_DISTANCE_MINIMUM = 5;\n\nconst DEFAULT_DRAWER_WIDTH = '80%';\n\nconst SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01,\n};\n\nconst ANIMATED_ZERO = new Animated.Value(0);\nconst ANIMATED_ONE = new Animated.Value(1);\n\ntype Binary = 0 | 1;\n\nexport default class DrawerView extends React.Component<DrawerProps> {\n  componentDidUpdate(prevProps: DrawerProps) {\n    const {\n      open,\n      drawerPosition,\n      drawerType,\n      swipeDistanceThreshold,\n      swipeVelocityThreshold,\n      hideStatusBarOnOpen: hideStatusBar,\n    } = this.props;\n\n    if (\n      // If we're not in the middle of a transition, sync the drawer's open state\n      typeof this.pendingOpenValue !== 'boolean' ||\n      open !== this.pendingOpenValue\n    ) {\n      this.toggleDrawer(open);\n    }\n\n    this.pendingOpenValue = undefined;\n\n    if (open !== prevProps.open && hideStatusBar) {\n      this.toggleStatusBar(open);\n    }\n\n    if (prevProps.drawerPosition !== drawerPosition) {\n      this.drawerPosition.setValue(\n        drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n      );\n    }\n\n    if (prevProps.drawerType !== drawerType) {\n      this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n    }\n\n    if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n      this.swipeDistanceThreshold.setValue(swipeDistanceThreshold);\n    }\n\n    if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n      this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n    }\n  }\n\n  componentWillUnmount() {\n    this.toggleStatusBar(false);\n    this.handleEndInteraction();\n  }\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private getDrawerWidth = (): number => {\n    const { drawerStyle, dimensions } = this.props;\n    const { width = DEFAULT_DRAWER_WIDTH } =\n      StyleSheet.flatten(drawerStyle) || {};\n\n    if (typeof width === 'string' && width.endsWith('%')) {\n      // Try to calculate width if a percentage is given\n      const percentage = Number(width.replace(/%$/, ''));\n\n      if (Number.isFinite(percentage)) {\n        return dimensions.width * (percentage / 100);\n      }\n    }\n\n    return typeof width === 'number' ? width : 0;\n  };\n\n  private clock = new Clock();\n  private interactionHandle: number | undefined;\n\n  private isDrawerTypeFront = new Value<Binary>(\n    this.props.drawerType === 'front' ? TRUE : FALSE\n  );\n\n  private isOpen = new Value<Binary>(this.props.open ? TRUE : FALSE);\n  private nextIsOpen = new Value<Binary | -1>(UNSET);\n  private isSwiping = new Value<Binary>(FALSE);\n\n  private initialDrawerWidth = this.getDrawerWidth();\n\n  private gestureState = new Value<number>(GestureState.UNDETERMINED);\n  private touchX = new Value<number>(0);\n  private velocityX = new Value<number>(0);\n  private gestureX = new Value<number>(0);\n  private offsetX = new Value<number>(0);\n  private position = new Value<number>(\n    this.props.open\n      ? this.initialDrawerWidth *\n        (this.props.drawerPosition === 'right'\n          ? DIRECTION_RIGHT\n          : DIRECTION_LEFT)\n      : 0\n  );\n\n  private containerWidth = new Value<number>(this.props.dimensions.width);\n  private drawerWidth = new Value<number>(this.initialDrawerWidth);\n  private drawerOpacity = new Value<number>(\n    this.props.drawerType === 'permanent' ? 1 : 0\n  );\n  private drawerPosition = new Value<number>(\n    this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n  );\n\n  // Comment stolen from react-native-gesture-handler/DrawerLayout\n  //\n  // While closing the drawer when user starts gesture outside of its area (in greyed\n  // out part of the window), we want the drawer to follow only once finger reaches the\n  // edge of the drawer.\n  // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n  // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n  // an arrow pointing left\n  // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    +---------------+    +---------------+    +---------------+    +---------------+\n  //\n  // For the above to work properly we define animated value that will keep start position\n  // of the gesture. Then we use that value to calculate how much we need to subtract from\n  // the dragX. If the gesture started on the greyed out area we take the distance from the\n  // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n  // drawer be pulled back as soon as you start the pan.\n  //\n  // This is used only when drawerType is \"front\"\n  private touchDistanceFromDrawer = cond(\n    this.isDrawerTypeFront,\n    cond(\n      eq(this.drawerPosition, DIRECTION_LEFT),\n      max(\n        // Distance of touch start from left screen edge - Drawer width\n        sub(sub(this.touchX, this.gestureX), this.drawerWidth),\n        0\n      ),\n      min(\n        multiply(\n          // Distance of drawer from left screen edge - Touch start point\n          sub(\n            sub(this.containerWidth, this.drawerWidth),\n            sub(this.touchX, this.gestureX)\n          ),\n          DIRECTION_RIGHT\n        ),\n        0\n      )\n    ),\n    0\n  );\n\n  private swipeDistanceThreshold = new Value<number>(\n    this.props.swipeDistanceThreshold\n  );\n  private swipeVelocityThreshold = new Value<number>(\n    this.props.swipeVelocityThreshold\n  );\n\n  private currentOpenValue: boolean = this.props.open;\n  private pendingOpenValue: boolean | undefined;\n\n  private isStatusBarHidden: boolean = false;\n\n  private manuallyTriggerSpring = new Value<Binary>(FALSE);\n\n  private transitionTo = (isOpen: number | Animated.Node<number>) => {\n    const toValue = new Value(0);\n    const frameTime = new Value(0);\n\n    const state = {\n      position: this.position,\n      time: new Value(0),\n      finished: new Value(FALSE),\n      velocity: new Value(0),\n    };\n\n    return block([\n      cond(clockRunning(this.clock), NOOP, [\n        // Animation wasn't running before\n        // Set the initial values and start the clock\n        set(toValue, multiply(isOpen, this.drawerWidth, this.drawerPosition)),\n        set(frameTime, 0),\n        set(state.time, 0),\n        set(state.finished, FALSE),\n        set(state.velocity, this.velocityX),\n        set(this.isOpen, isOpen),\n        startClock(this.clock),\n        call([], this.handleStartInteraction),\n        set(this.manuallyTriggerSpring, FALSE),\n      ]),\n      spring(this.clock, state, { ...SPRING_CONFIG, toValue }),\n      cond(state.finished, [\n        // Reset gesture and velocity from previous gesture\n        set(this.touchX, 0),\n        set(this.gestureX, 0),\n        set(this.velocityX, 0),\n        set(this.offsetX, 0),\n        // When the animation finishes, stop the clock\n        stopClock(this.clock),\n        call([this.isOpen], ([value]: readonly Binary[]) => {\n          const open = Boolean(value);\n          this.handleEndInteraction();\n\n          if (open !== this.props.open) {\n            // Sync drawer's state after animation finished\n            // This shouldn't be necessary, but there seems to be an issue on iOS\n            this.toggleDrawer(this.props.open);\n          }\n        }),\n      ]),\n    ]);\n  };\n\n  private dragX = block([\n    onChange(\n      this.isOpen,\n      call([this.isOpen], ([value]: readonly Binary[]) => {\n        const open = Boolean(value);\n\n        this.currentOpenValue = open;\n\n        // Without this check, the drawer can go to an infinite update <-> animate loop for sync updates\n        if (open !== this.props.open) {\n          // If the mode changed, update state\n          if (open) {\n            this.props.onOpen();\n          } else {\n            this.props.onClose();\n          }\n\n          this.pendingOpenValue = open;\n\n          // Force componentDidUpdate to fire, whether user does a setState or not\n          // This allows us to detect when the user drops the update and revert back\n          // It's necessary to make sure that the state stays in sync\n          this.forceUpdate();\n        }\n      })\n    ),\n    onChange(\n      this.nextIsOpen,\n      cond(neq(this.nextIsOpen, UNSET), [\n        // Stop any running animations\n        cond(clockRunning(this.clock), stopClock(this.clock)),\n        // Update the open value to trigger the transition\n        set(this.isOpen, this.nextIsOpen),\n        set(this.gestureX, 0),\n        set(this.nextIsOpen, UNSET),\n      ])\n    ),\n    // This block must be after the this.isOpen listener since we check for current value\n    onChange(\n      this.isSwiping,\n      // Listen to updates for this value only when it changes\n      // Without `onChange`, this will fire even if the value didn't change\n      // We don't want to call the listeners if the value didn't change\n      call([this.isSwiping], ([value]: readonly Binary[]) => {\n        const { keyboardDismissMode } = this.props;\n\n        if (value === TRUE) {\n          if (keyboardDismissMode === 'on-drag') {\n            Keyboard.dismiss();\n          }\n\n          this.toggleStatusBar(true);\n        } else {\n          this.toggleStatusBar(this.currentOpenValue);\n        }\n      })\n    ),\n    onChange(\n      this.gestureState,\n      cond(\n        eq(this.gestureState, GestureState.ACTIVE),\n        call([], this.handleStartInteraction)\n      )\n    ),\n    cond(\n      eq(this.gestureState, GestureState.ACTIVE),\n      [\n        cond(this.isSwiping, NOOP, [\n          // We weren't dragging before, set it to true\n          set(this.isSwiping, TRUE),\n          // Also update the drag offset to the last position\n          set(this.offsetX, this.position),\n        ]),\n        // Update position with previous offset + gesture distance\n        set(\n          this.position,\n          add(this.offsetX, this.gestureX, this.touchDistanceFromDrawer)\n        ),\n        // Stop animations while we're dragging\n        stopClock(this.clock),\n      ],\n      [\n        set(this.isSwiping, FALSE),\n        set(this.touchX, 0),\n        this.transitionTo(\n          cond(\n            this.manuallyTriggerSpring,\n            this.isOpen,\n            cond(\n              or(\n                and(\n                  greaterThan(abs(this.gestureX), SWIPE_DISTANCE_MINIMUM),\n                  greaterThan(abs(this.velocityX), this.swipeVelocityThreshold)\n                ),\n                greaterThan(abs(this.gestureX), this.swipeDistanceThreshold)\n              ),\n              cond(\n                eq(this.drawerPosition, DIRECTION_LEFT),\n                // If swiped to right, open the drawer, otherwise close it\n                greaterThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                ),\n                // If swiped to left, open the drawer, otherwise close it\n                lessThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                )\n              ),\n              this.isOpen\n            )\n          )\n        ),\n      ]\n    ),\n    this.position,\n  ]);\n\n  private translateX = cond(\n    eq(this.drawerPosition, DIRECTION_RIGHT),\n    min(max(multiply(this.drawerWidth, -1), this.dragX), 0),\n    max(min(this.drawerWidth, this.dragX), 0)\n  );\n\n  private progress = cond(\n    // Check if the drawer width is available to avoid division by zero\n    eq(this.drawerWidth, 0),\n    0,\n    abs(divide(this.translateX, this.drawerWidth))\n  );\n\n  private handleGestureEvent = event([\n    {\n      nativeEvent: {\n        x: this.touchX,\n        translationX: this.gestureX,\n        velocityX: this.velocityX,\n      },\n    },\n  ]);\n\n  private handleGestureStateChange = event([\n    {\n      nativeEvent: {\n        state: (s: Animated.Value<number>) => set(this.gestureState, s),\n      },\n    },\n  ]);\n\n  private handleContainerLayout = (e: LayoutChangeEvent) =>\n    this.containerWidth.setValue(e.nativeEvent.layout.width);\n\n  private handleDrawerLayout = (e: LayoutChangeEvent) => {\n    this.drawerWidth.setValue(e.nativeEvent.layout.width);\n    this.toggleDrawer(this.props.open);\n\n    // Until layout is available, drawer is hidden with opacity: 0 by default\n    // Show it in the next frame when layout is available\n    // If we don't delay it until the next frame, there's a visible flicker\n    requestAnimationFrame(() =>\n      requestAnimationFrame(() => this.drawerOpacity.setValue(1))\n    );\n  };\n\n  private toggleDrawer = (open: boolean) => {\n    if (this.currentOpenValue !== open) {\n      this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n      // This value will also be set shortly after as changing this.nextIsOpen changes this.isOpen\n      // However, there's a race condition on Android, so we need to set a bit earlier\n      this.currentOpenValue = open;\n    }\n  };\n\n  private toggleStatusBar = (hidden: boolean) => {\n    const { hideStatusBarOnOpen: hideStatusBar, statusBarAnimation } =\n      this.props;\n\n    if (hideStatusBar && this.isStatusBarHidden !== hidden) {\n      this.isStatusBarHidden = hidden;\n      StatusBar.setHidden(hidden, statusBarAnimation);\n    }\n  };\n\n  render() {\n    const {\n      open,\n      swipeEnabled,\n      drawerPosition,\n      drawerType,\n      swipeEdgeWidth,\n      drawerStyle,\n      overlayStyle,\n      renderDrawerContent,\n      renderSceneContent,\n      gestureHandlerProps,\n    } = this.props;\n\n    const isOpen = drawerType === 'permanent' ? true : open;\n    const isRight = drawerPosition === 'right';\n\n    const contentTranslateX =\n      drawerType === 'front' ? ANIMATED_ZERO : this.translateX;\n\n    const drawerTranslateX =\n      drawerType === 'back'\n        ? I18nManager.isRTL\n          ? multiply(\n              sub(this.containerWidth, this.drawerWidth),\n              isRight ? 1 : -1\n            )\n          : ANIMATED_ZERO\n        : this.translateX;\n\n    const offset =\n      drawerType === 'back'\n        ? 0\n        : I18nManager.isRTL\n        ? '100%'\n        : multiply(this.drawerWidth, -1);\n\n    // FIXME: Currently hitSlop is broken when on Android when drawer is on right\n    // https://github.com/software-mansion/react-native-gesture-handler/issues/569\n    const hitSlop = isRight\n      ? // Extend hitSlop to the side of the screen when drawer is closed\n        // This lets the user drag the drawer from the side of the screen\n        { right: 0, width: isOpen ? undefined : swipeEdgeWidth }\n      : { left: 0, width: isOpen ? undefined : swipeEdgeWidth };\n\n    const progress = drawerType === 'permanent' ? ANIMATED_ONE : this.progress;\n\n    return (\n      <DrawerProgressContext.Provider value={progress}>\n        <PanGestureHandler\n          activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          onGestureEvent={this.handleGestureEvent}\n          onHandlerStateChange={this.handleGestureStateChange}\n          hitSlop={hitSlop}\n          enabled={drawerType !== 'permanent' && swipeEnabled}\n          {...gestureHandlerProps}\n        >\n          <Animated.View\n            onLayout={this.handleContainerLayout}\n            style={[\n              styles.main,\n              {\n                flexDirection:\n                  drawerType === 'permanent' && !isRight\n                    ? 'row-reverse'\n                    : 'row',\n              },\n            ]}\n          >\n            <Animated.View\n              style={[\n                styles.content,\n                drawerType !== 'permanent'\n                  ? { transform: [{ translateX: contentTranslateX }] }\n                  : undefined,\n              ]}\n            >\n              <View\n                accessibilityElementsHidden={\n                  isOpen && drawerType !== 'permanent'\n                }\n                importantForAccessibility={\n                  isOpen && drawerType !== 'permanent'\n                    ? 'no-hide-descendants'\n                    : 'auto'\n                }\n                style={styles.content}\n              >\n                {renderSceneContent()}\n              </View>\n              {\n                // Disable overlay if sidebar is permanent\n                drawerType === 'permanent' ? null : (\n                  <Overlay\n                    progress={progress}\n                    onPress={() => this.toggleDrawer(false)}\n                    style={overlayStyle as any}\n                    accessibilityElementsHidden={!isOpen}\n                    importantForAccessibility={\n                      isOpen ? 'auto' : 'no-hide-descendants'\n                    }\n                  />\n                )\n              }\n            </Animated.View>\n            <Animated.Code\n              // This is needed to make sure that container width updates with `setValue`\n              // Without this, it won't update when not used in styles\n              exec={this.containerWidth}\n            />\n            {drawerType === 'permanent' ? null : (\n              <Animated.Code\n                exec={block([\n                  onChange(this.manuallyTriggerSpring, [\n                    cond(eq(this.manuallyTriggerSpring, TRUE), [\n                      set(this.nextIsOpen, FALSE),\n                      call([], () => (this.currentOpenValue = false)),\n                    ]),\n                  ]),\n                ])}\n              />\n            )}\n            <Animated.View\n              accessibilityViewIsModal={isOpen && drawerType !== 'permanent'}\n              removeClippedSubviews={Platform.OS !== 'ios'}\n              onLayout={this.handleDrawerLayout}\n              style={[\n                styles.container,\n                drawerType === 'permanent'\n                  ? { opacity: 1 }\n                  : {\n                      transform: [{ translateX: drawerTranslateX }],\n                      opacity: this.drawerOpacity,\n                    },\n                drawerType === 'permanent'\n                  ? // Without this, the `left`/`right` values don't get reset\n                    isRight\n                    ? { right: 0 }\n                    : { left: 0 }\n                  : [\n                      styles.nonPermanent,\n                      isRight ? { right: offset } : { left: offset },\n                      { zIndex: drawerType === 'back' ? -1 : 0 },\n                    ],\n                drawerStyle as any,\n              ]}\n            >\n              {renderDrawerContent()}\n            </Animated.View>\n          </Animated.View>\n        </PanGestureHandler>\n      </DrawerProgressContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    maxWidth: '100%',\n  },\n  nonPermanent: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: DEFAULT_DRAWER_WIDTH,\n  },\n  content: {\n    flex: 1,\n  },\n  main: {\n    flex: 1,\n    ...Platform.select({\n      // FIXME: We need to hide `overflowX` on Web so the translated content doesn't show offscreen.\n      // But adding `overflowX: 'hidden'` prevents content from collapsing the URL bar.\n      web: null,\n      default: { overflow: 'hidden' },\n    }),\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}