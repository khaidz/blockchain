{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { CommonActions, DrawerActions, useLinkBuilder } from '@react-navigation/native';\nimport * as React from 'react';\nimport DrawerItem from \"./DrawerItem\";\nexport default function DrawerItemList(_ref) {\n  var state = _ref.state,\n    navigation = _ref.navigation,\n    descriptors = _ref.descriptors;\n  var buildLink = useLinkBuilder();\n  var focusedRoute = state.routes[state.index];\n  var focusedDescriptor = descriptors[focusedRoute.key];\n  var focusedOptions = focusedDescriptor.options;\n  var drawerActiveTintColor = focusedOptions.drawerActiveTintColor,\n    drawerInactiveTintColor = focusedOptions.drawerInactiveTintColor,\n    drawerActiveBackgroundColor = focusedOptions.drawerActiveBackgroundColor,\n    drawerInactiveBackgroundColor = focusedOptions.drawerInactiveBackgroundColor;\n  return state.routes.map(function (route, i) {\n    var focused = i === state.index;\n    var _descriptors$route$ke = descriptors[route.key].options,\n      title = _descriptors$route$ke.title,\n      drawerLabel = _descriptors$route$ke.drawerLabel,\n      drawerIcon = _descriptors$route$ke.drawerIcon,\n      drawerLabelStyle = _descriptors$route$ke.drawerLabelStyle,\n      drawerItemStyle = _descriptors$route$ke.drawerItemStyle;\n    return React.createElement(DrawerItem, {\n      key: route.key,\n      label: drawerLabel !== undefined ? drawerLabel : title !== undefined ? title : route.name,\n      icon: drawerIcon,\n      focused: focused,\n      activeTintColor: drawerActiveTintColor,\n      inactiveTintColor: drawerInactiveTintColor,\n      activeBackgroundColor: drawerActiveBackgroundColor,\n      inactiveBackgroundColor: drawerInactiveBackgroundColor,\n      labelStyle: drawerLabelStyle,\n      style: drawerItemStyle,\n      to: buildLink(route.name, route.params),\n      onPress: function onPress() {\n        navigation.dispatch(_objectSpread(_objectSpread({}, focused ? DrawerActions.closeDrawer() : CommonActions.navigate({\n          name: route.name,\n          merge: true\n        })), {}, {\n          target: state.key\n        }));\n      }\n    });\n  });\n}","map":{"version":3,"names":["CommonActions","DrawerActions","useLinkBuilder","React","DrawerItem","DrawerItemList","_ref","state","navigation","descriptors","buildLink","focusedRoute","routes","index","focusedDescriptor","key","focusedOptions","options","drawerActiveTintColor","drawerInactiveTintColor","drawerActiveBackgroundColor","drawerInactiveBackgroundColor","map","route","i","focused","_descriptors$route$ke","title","drawerLabel","drawerIcon","drawerLabelStyle","drawerItemStyle","createElement","label","undefined","name","icon","activeTintColor","inactiveTintColor","activeBackgroundColor","inactiveBackgroundColor","labelStyle","style","to","params","onPress","dispatch","_objectSpread","closeDrawer","navigate","merge","target"],"sources":["/home/khaibq/blockchain/mobile/node_modules/@react-navigation/drawer/lib/module/views/DrawerItemList.tsx"],"sourcesContent":["import {\n  CommonActions,\n  DrawerActions,\n  DrawerNavigationState,\n  ParamListBase,\n  useLinkBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\n\nimport type { DrawerDescriptorMap, DrawerNavigationHelpers } from '../types';\nimport DrawerItem from './DrawerItem';\n\ntype Props = {\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\n/**\n * Component that renders the navigation list in the drawer.\n */\nexport default function DrawerItemList({\n  state,\n  navigation,\n  descriptors,\n}: Props) {\n  const buildLink = useLinkBuilder();\n\n  const focusedRoute = state.routes[state.index];\n  const focusedDescriptor = descriptors[focusedRoute.key];\n  const focusedOptions = focusedDescriptor.options;\n\n  const {\n    drawerActiveTintColor,\n    drawerInactiveTintColor,\n    drawerActiveBackgroundColor,\n    drawerInactiveBackgroundColor,\n  } = focusedOptions;\n\n  return state.routes.map((route, i) => {\n    const focused = i === state.index;\n    const {\n      title,\n      drawerLabel,\n      drawerIcon,\n      drawerLabelStyle,\n      drawerItemStyle,\n    } = descriptors[route.key].options;\n\n    return (\n      <DrawerItem\n        key={route.key}\n        label={\n          drawerLabel !== undefined\n            ? drawerLabel\n            : title !== undefined\n            ? title\n            : route.name\n        }\n        icon={drawerIcon}\n        focused={focused}\n        activeTintColor={drawerActiveTintColor}\n        inactiveTintColor={drawerInactiveTintColor}\n        activeBackgroundColor={drawerActiveBackgroundColor}\n        inactiveBackgroundColor={drawerInactiveBackgroundColor}\n        labelStyle={drawerLabelStyle}\n        style={drawerItemStyle}\n        to={buildLink(route.name, route.params)}\n        onPress={() => {\n          navigation.dispatch({\n            ...(focused\n              ? DrawerActions.closeDrawer()\n              : CommonActions.navigate({ name: route.name, merge: true })),\n            target: state.key,\n          });\n        }}\n      />\n    );\n  }) as React.ReactNode as React.ReactElement;\n}\n"],"mappings":";;;AAAA,SACEA,aADF,EAEEC,aAFF,EAKEC,cALF,QAMO,0BANP;AAOA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAGA,OAAOC,UAAP;AAWA,eAAe,SAASC,cAATA,CAAAC,IAAA,EAIL;EAAA,IAHRC,KADqC,GAAAD,IAAA,CACrCC,KADqC;IAErCC,UAFqC,GAAAF,IAAA,CAErCE,UAFqC;IAGrCC,WAAA,GAAAH,IAAA,CAAAG,WAAA;EAEA,IAAMC,SAAS,GAAGR,cAAc,EAAhC;EAEA,IAAMS,YAAY,GAAGJ,KAAK,CAACK,MAAN,CAAaL,KAAK,CAACM,KAAnB,CAArB;EACA,IAAMC,iBAAiB,GAAGL,WAAW,CAACE,YAAY,CAACI,GAAd,CAArC;EACA,IAAMC,cAAc,GAAGF,iBAAiB,CAACG,OAAzC;EAEA,IACEC,qBADI,GAKFF,cALJ,CACEE,qBADI;IAEJC,uBAFI,GAKFH,cALJ,CAEEG,uBAFI;IAGJC,2BAHI,GAKFJ,cALJ,CAGEI,2BAHI;IAIJC,6BAAA,GACEL,cALJ,CAIEK,6BAAA;EAGF,OAAOd,KAAK,CAACK,MAAN,CAAaU,GAAb,CAAiB,UAACC,KAAD,EAAQC,CAAR,EAAc;IACpC,IAAMC,OAAO,GAAGD,CAAC,KAAKjB,KAAK,CAACM,KAA5B;IACA,IAAAa,qBAAA,GAMIjB,WAAW,CAACc,KAAK,CAACR,GAAP,CAAX,CAAuBE,OAN3B;MACEU,KADI,GAAAD,qBAAA,CACJC,KADI;MAEJC,WAFI,GAAAF,qBAAA,CAEJE,WAFI;MAGJC,UAHI,GAAAH,qBAAA,CAGJG,UAHI;MAIJC,gBAJI,GAAAJ,qBAAA,CAIJI,gBAJI;MAKJC,eAAA,GAAAL,qBAAA,CAAAK,eAAA;IAGF,OACE5B,KAAA,CAAA6B,aAAA,CAAC5B,UAAD;MACEW,GAAG,EAAEQ,KAAK,CAACR,GADb;MAEEkB,KAAK,EACHL,WAAW,KAAKM,SAAhB,GACIN,WADJ,GAEID,KAAK,KAAKO,SAAV,GACAP,KADA,GAEAJ,KAAK,CAACY,IAPd;MASEC,IAAI,EAAEP,UATR;MAUEJ,OAAO,EAAEA,OAVX;MAWEY,eAAe,EAAEnB,qBAXnB;MAYEoB,iBAAiB,EAAEnB,uBAZrB;MAaEoB,qBAAqB,EAAEnB,2BAbzB;MAcEoB,uBAAuB,EAAEnB,6BAd3B;MAeEoB,UAAU,EAAEX,gBAfd;MAgBEY,KAAK,EAAEX,eAhBT;MAiBEY,EAAE,EAAEjC,SAAS,CAACa,KAAK,CAACY,IAAP,EAAaZ,KAAK,CAACqB,MAAnB,CAjBf;MAkBEC,OAAO,EAAE,SAAAA,QAAA,EAAM;QACbrC,UAAU,CAACsC,QAAX,CAAAC,aAAA,CAAAA,aAAA,KACMtB,OAAO,GACPxB,aAAa,CAAC+C,WAAd,EADO,GAEPhD,aAAa,CAACiD,QAAd,CAAuB;UAAEd,IAAI,EAAEZ,KAAK,CAACY,IAAd;UAAoBe,KAAK,EAAE;QAA3B,CAAvB,CAFJ;UAGAC,MAAM,EAAE5C,KAAK,CAACQ;QAAA,GAJhB;MAMD;IAzBH,EADF;EA6BD,CAvCM,CAAP;AAwCD"},"metadata":{},"sourceType":"module","externalDependencies":[]}